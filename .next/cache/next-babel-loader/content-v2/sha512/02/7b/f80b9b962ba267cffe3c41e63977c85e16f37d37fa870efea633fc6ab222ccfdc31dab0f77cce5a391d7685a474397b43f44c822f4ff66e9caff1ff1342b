{"ast":null,"code":"import dbConnect from '../../../utils/dbConnect';\nimport Pet from '../../../models/Pet';\nexport default async function handler(req, res) {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n  await dbConnect();\n\n  switch (method) {\n    case 'GET'\n    /* Get a model by its ID */\n    :\n      try {\n        const pet = await Pet.findById(id);\n\n        if (!pet) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: pet\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT'\n    /* Edit a model by its ID */\n    :\n      try {\n        const pet = await Pet.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        });\n\n        if (!pet) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: pet\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE'\n    /* Delete a model by its ID */\n    :\n      try {\n        const deletedPet = await Pet.deleteOne({\n          _id: id\n        });\n\n        if (!deletedPet) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n}","map":{"version":3,"sources":["/Users/roberthawker/Desktop/moods/pages/api/pets/[id].js"],"names":["dbConnect","Pet","handler","req","res","query","id","method","pet","findById","status","json","success","data","error","findByIdAndUpdate","body","new","runValidators","deletedPet","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGFJ,GAHJ;AAKA,QAAMH,SAAS,EAAf;;AAEA,UAAQO,MAAR;AACE,SAAK;AAAM;AAAX;AACE,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,QAAJ,CAAaH,EAAb,CAAlB;;AACA,YAAI,CAACE,GAAL,EAAU;AACR,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACD;;AACDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACD,OAND,CAME,OAAOM,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AAEF,SAAK;AAAM;AAAX;AACE,UAAI;AACF,cAAMJ,GAAG,GAAG,MAAMP,GAAG,CAACc,iBAAJ,CAAsBT,EAAtB,EAA0BH,GAAG,CAACa,IAA9B,EAAoC;AACpDC,UAAAA,GAAG,EAAE,IAD+C;AAEpDC,UAAAA,aAAa,EAAE;AAFqC,SAApC,CAAlB;;AAIA,YAAI,CAACV,GAAL,EAAU;AACR,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACD;;AACDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACD,OATD,CASE,OAAOM,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AAEF,SAAK;AAAS;AAAd;AACE,UAAI;AACF,cAAMO,UAAU,GAAG,MAAMlB,GAAG,CAACmB,SAAJ,CAAc;AAAEC,UAAAA,GAAG,EAAEf;AAAP,SAAd,CAAzB;;AACA,YAAI,CAACa,UAAL,EAAiB;AACf,iBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACD;;AACDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAArB;AACD,OAND,CAME,OAAOC,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AAEF;AACER,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AA1CJ;AA4CD","sourcesContent":["import dbConnect from '../../../utils/dbConnect'\nimport Pet from '../../../models/Pet'\n\nexport default async function handler(req, res) {\n  const {\n    query: { id },\n    method,\n  } = req\n\n  await dbConnect()\n\n  switch (method) {\n    case 'GET' /* Get a model by its ID */:\n      try {\n        const pet = await Pet.findById(id)\n        if (!pet) {\n          return res.status(400).json({ success: false })\n        }\n        res.status(200).json({ success: true, data: pet })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n\n    case 'PUT' /* Edit a model by its ID */:\n      try {\n        const pet = await Pet.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true,\n        })\n        if (!pet) {\n          return res.status(400).json({ success: false })\n        }\n        res.status(200).json({ success: true, data: pet })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n\n    case 'DELETE' /* Delete a model by its ID */:\n      try {\n        const deletedPet = await Pet.deleteOne({ _id: id })\n        if (!deletedPet) {\n          return res.status(400).json({ success: false })\n        }\n        res.status(200).json({ success: true, data: {} })\n      } catch (error) {\n        res.status(400).json({ success: false })\n      }\n      break\n\n    default:\n      res.status(400).json({ success: false })\n      break\n  }\n}\n"]},"metadata":{},"sourceType":"module"}