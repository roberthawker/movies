{"ast":null,"code":"import _defineProperty from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/roberthawker/Desktop/moods/components/Form.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { mutate } from 'swr';\n\nvar Form = function Form(_ref) {\n  _s();\n\n  var formId = _ref.formId,\n      petForm = _ref.petForm,\n      _ref$forNewPet = _ref.forNewPet,\n      forNewPet = _ref$forNewPet === void 0 ? true : _ref$forNewPet;\n  var router = useRouter();\n  var contentType = 'application/json';\n\n  var _useState = useState({}),\n      errors = _useState[0],\n      setErrors = _useState[1];\n\n  var _useState2 = useState(''),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState({\n    name: petForm.name,\n    owner_name: petForm.owner_name,\n    species: petForm.species,\n    age: petForm.age,\n    poddy_trained: petForm.poddy_trained,\n    diet: petForm.diet,\n    image_url: petForm.image_url,\n    likes: petForm.likes,\n    dislikes: petForm.dislikes\n  }),\n      form = _useState3[0],\n      setForm = _useState3[1];\n  /* The PUT method edits an existing entry in the mongodb database. */\n\n\n  var putData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form) {\n      var id, res, _yield$res$json, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = router.query.id;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"/api/pets/\".concat(id), {\n                method: 'PUT',\n                headers: {\n                  Accept: contentType,\n                  'Content-Type': contentType\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (res.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error(res.status);\n\n            case 7:\n              _context.next = 9;\n              return res.json();\n\n            case 9:\n              _yield$res$json = _context.sent;\n              data = _yield$res$json.data;\n              mutate(\"/api/pets/\".concat(id), data, false); // Update the local data without a revalidation\n\n              router.push('/');\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              setMessage('Failed to update pet');\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15]]);\n    }));\n\n    return function putData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /* The POST method adds a new entry in the mongodb database. */\n\n\n  var postData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(form) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch('/api/pets', {\n                method: 'POST',\n                headers: {\n                  Accept: contentType,\n                  'Content-Type': contentType\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 3:\n              res = _context2.sent;\n\n              if (res.ok) {\n                _context2.next = 6;\n                break;\n              }\n\n              throw new Error(res.status);\n\n            case 6:\n              router.push('/');\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              setMessage('Failed to add pet');\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function postData(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(e) {\n    var target = e.target;\n    var value = target.name === 'poddy_trained' ? target.checked : target.value;\n    var name = target.name;\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, name, value)));\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var errs = formValidate();\n\n    if (Object.keys(errs).length === 0) {\n      forNewPet ? postData(form) : putData(form);\n    } else {\n      setErrors({\n        errs: errs\n      });\n    }\n  };\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n\n\n  var formValidate = function formValidate() {\n    var err = {};\n    if (!form.name) err.name = 'Name is required';\n    if (!form.owner_name) err.owner_name = 'Owner is required';\n    if (!form.species) err.species = 'Species is required';\n    if (!form.image_url) err.image_url = 'Image URL is required';\n    return err;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    id: formId,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Name\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"20\",\n    name: \"name\",\n    value: form.name,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"owner_name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Owner\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"20\",\n    name: \"owner_name\",\n    value: form.owner_name,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"species\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Species\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"30\",\n    name: \"species\",\n    value: form.species,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"age\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Age\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"age\",\n    value: form.age,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"poddy_trained\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Potty Trained\"), __jsx(\"input\", {\n    type: \"checkbox\",\n    name: \"poddy_trained\",\n    checked: form.poddy_trained,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"diet\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Diet\"), __jsx(\"textarea\", {\n    name: \"diet\",\n    maxLength: \"60\",\n    value: form.diet,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"image_url\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"Image URL\"), __jsx(\"input\", {\n    type: \"url\",\n    name: \"image_url\",\n    value: form.image_url,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"likes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Likes\"), __jsx(\"textarea\", {\n    name: \"likes\",\n    maxLength: \"60\",\n    value: form.likes,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"dislikes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"Dislikes\"), __jsx(\"textarea\", {\n    name: \"dislikes\",\n    maxLength: \"60\",\n    value: form.dislikes,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Submit\")), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, message), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, Object.keys(errors).map(function (err, index) {\n    return __jsx(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, err);\n  })));\n};\n\n_s(Form, \"mU7LeMf3u65W6OUhokIorwXiT9M=\", false, function () {\n  return [useRouter];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/roberthawker/Desktop/moods/components/Form.js"],"names":["useState","useRouter","mutate","Form","formId","petForm","forNewPet","router","contentType","errors","setErrors","message","setMessage","name","owner_name","species","age","poddy_trained","diet","image_url","likes","dislikes","form","setForm","putData","id","query","fetch","method","headers","Accept","body","JSON","stringify","res","ok","Error","status","json","data","push","postData","handleChange","e","target","value","checked","handleSubmit","preventDefault","errs","formValidate","Object","keys","length","err","map","index"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { mutate } from 'swr'\n\nconst Form = ({ formId, petForm, forNewPet = true }) => {\n  const router = useRouter()\n  const contentType = 'application/json'\n  const [errors, setErrors] = useState({})\n  const [message, setMessage] = useState('')\n\n  const [form, setForm] = useState({\n    name: petForm.name,\n    owner_name: petForm.owner_name,\n    species: petForm.species,\n    age: petForm.age,\n    poddy_trained: petForm.poddy_trained,\n    diet: petForm.diet,\n    image_url: petForm.image_url,\n    likes: petForm.likes,\n    dislikes: petForm.dislikes,\n  })\n\n  /* The PUT method edits an existing entry in the mongodb database. */\n  const putData = async (form) => {\n    const { id } = router.query\n\n    try {\n      const res = await fetch(`/api/pets/${id}`, {\n        method: 'PUT',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      const { data } = await res.json()\n\n      mutate(`/api/pets/${id}`, data, false) // Update the local data without a revalidation\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to update pet')\n    }\n  }\n\n  /* The POST method adds a new entry in the mongodb database. */\n  const postData = async (form) => {\n    try {\n      const res = await fetch('/api/pets', {\n        method: 'POST',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to add pet')\n    }\n  }\n\n  const handleChange = (e) => {\n    const target = e.target\n    const value =\n      target.name === 'poddy_trained' ? target.checked : target.value\n    const name = target.name\n\n    setForm({\n      ...form,\n      [name]: value,\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const errs = formValidate()\n    if (Object.keys(errs).length === 0) {\n      forNewPet ? postData(form) : putData(form)\n    } else {\n      setErrors({ errs })\n    }\n  }\n\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n  const formValidate = () => {\n    let err = {}\n    if (!form.name) err.name = 'Name is required'\n    if (!form.owner_name) err.owner_name = 'Owner is required'\n    if (!form.species) err.species = 'Species is required'\n    if (!form.image_url) err.image_url = 'Image URL is required'\n    return err\n  }\n\n  return (\n    <>\n      <form id={formId} onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          maxLength=\"20\"\n          name=\"name\"\n          value={form.name}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"owner_name\">Owner</label>\n        <input\n          type=\"text\"\n          maxLength=\"20\"\n          name=\"owner_name\"\n          value={form.owner_name}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"species\">Species</label>\n        <input\n          type=\"text\"\n          maxLength=\"30\"\n          name=\"species\"\n          value={form.species}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"age\">Age</label>\n        <input\n          type=\"number\"\n          name=\"age\"\n          value={form.age}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"poddy_trained\">Potty Trained</label>\n        <input\n          type=\"checkbox\"\n          name=\"poddy_trained\"\n          checked={form.poddy_trained}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"diet\">Diet</label>\n        <textarea\n          name=\"diet\"\n          maxLength=\"60\"\n          value={form.diet}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"image_url\">Image URL</label>\n        <input\n          type=\"url\"\n          name=\"image_url\"\n          value={form.image_url}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"likes\">Likes</label>\n        <textarea\n          name=\"likes\"\n          maxLength=\"60\"\n          value={form.likes}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"dislikes\">Dislikes</label>\n        <textarea\n          name=\"dislikes\"\n          maxLength=\"60\"\n          value={form.dislikes}\n          onChange={handleChange}\n        />\n\n        <button type=\"submit\" className=\"btn\">\n          Submit\n        </button>\n      </form>\n      <p>{message}</p>\n      <div>\n        {Object.keys(errors).map((err, index) => (\n          <li key={index}>{err}</li>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}