{"ast":null,"code":"import _defineProperty from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/roberthawker/Desktop/moods/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/roberthawker/Desktop/moods/components/Form.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { mutate } from \"swr\";\n\nvar Form = function Form(_ref) {\n  _s();\n\n  var formId = _ref.formId,\n      movieForm = _ref.movieForm,\n      _ref$forNewMovie = _ref.forNewMovie,\n      forNewMovie = _ref$forNewMovie === void 0 ? true : _ref$forNewMovie;\n  var router = useRouter();\n  var contentType = \"application/json\";\n\n  var _useState = useState({}),\n      errors = _useState[0],\n      setErrors = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState({\n    title: movieForm.title,\n    poster: movieForm.poster,\n    year: movieForm.year\n  }),\n      form = _useState3[0],\n      setForm = _useState3[1];\n  /* The PUT method edits an existing entry in the mongodb database. */\n\n\n  var putData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form) {\n      var id, res, _yield$res$json, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = router.query.id;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"/api/movies/\".concat(id), {\n                method: \"PUT\",\n                headers: {\n                  Accept: contentType,\n                  \"Content-Type\": contentType\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (res.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error(res.status);\n\n            case 7:\n              _context.next = 9;\n              return res.json();\n\n            case 9:\n              _yield$res$json = _context.sent;\n              data = _yield$res$json.data;\n              mutate(\"/api/movies/\".concat(id), data, false); // Update the local data without a revalidation\n\n              router.push(\"/\");\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              setMessage(\"Failed to update movie\");\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 15]]);\n    }));\n\n    return function putData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /* The POST method adds a new entry in the mongodb database. */\n\n\n  var postData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(form) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch(\"/api/movies\", {\n                method: \"POST\",\n                headers: {\n                  Accept: contentType,\n                  \"Content-Type\": contentType\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 3:\n              res = _context2.sent;\n\n              if (res.ok) {\n                _context2.next = 6;\n                break;\n              }\n\n              throw new Error(res.status);\n\n            case 6:\n              router.push(\"/\");\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              setMessage(\"Failed to add movie\");\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function postData(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(e) {\n    var target = e.target;\n    var value = target.name === \"poddy_trained\" ? target.checked : target.value;\n    var name = target.name;\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, name, value)));\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var errs = formValidate();\n\n    if (Object.keys(errs).length === 0) {\n      forNewMovie ? postData(form) : putData(form);\n    } else {\n      setErrors({\n        errs: errs\n      });\n    }\n  };\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n\n\n  var formValidate = function formValidate() {\n    var err = {};\n    if (!form.title) err.title = \"Title is required\";\n    if (!form.poster) err.poster = \"Poster is required\";\n    return err;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    id: formId,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Title\"), __jsx(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    value: form.title,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"age\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Year\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"year\",\n    value: form.year,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"poster\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Poster\"), __jsx(\"input\", {\n    type: \"url\",\n    name: \"poster\",\n    value: form.poster,\n    onChange: handleChange,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Submit\")), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, message), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, Object.keys(errors).map(function (err, index) {\n    return __jsx(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, err);\n  })));\n};\n\n_s(Form, \"ozw/Db2z5IvvJ6q/6jplJP1y3ys=\", false, function () {\n  return [useRouter];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/roberthawker/Desktop/moods/components/Form.js"],"names":["useState","useRouter","mutate","Form","formId","movieForm","forNewMovie","router","contentType","errors","setErrors","message","setMessage","title","poster","year","form","setForm","putData","id","query","fetch","method","headers","Accept","body","JSON","stringify","res","ok","Error","status","json","data","push","postData","handleChange","e","target","value","name","checked","handleSubmit","preventDefault","errs","formValidate","Object","keys","length","err","map","index"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { mutate } from \"swr\";\n\nconst Form = ({ formId, movieForm, forNewMovie = true }) => {\n  const router = useRouter();\n  const contentType = \"application/json\";\n  const [errors, setErrors] = useState({});\n  const [message, setMessage] = useState(\"\");\n\n  const [form, setForm] = useState({\n    title: movieForm.title,\n    poster: movieForm.poster,\n    year: movieForm.year,\n  });\n\n  /* The PUT method edits an existing entry in the mongodb database. */\n  const putData = async (form) => {\n    const { id } = router.query;\n\n    try {\n      const res = await fetch(`/api/movies/${id}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: contentType,\n          \"Content-Type\": contentType,\n        },\n        body: JSON.stringify(form),\n      });\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      const { data } = await res.json();\n\n      mutate(`/api/movies/${id}`, data, false); // Update the local data without a revalidation\n      router.push(\"/\");\n    } catch (error) {\n      setMessage(\"Failed to update movie\");\n    }\n  };\n\n  /* The POST method adds a new entry in the mongodb database. */\n  const postData = async (form) => {\n    try {\n      const res = await fetch(\"/api/movies\", {\n        method: \"POST\",\n        headers: {\n          Accept: contentType,\n          \"Content-Type\": contentType,\n        },\n        body: JSON.stringify(form),\n      });\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      router.push(\"/\");\n    } catch (error) {\n      setMessage(\"Failed to add movie\");\n    }\n  };\n\n  const handleChange = (e) => {\n    const target = e.target;\n    const value =\n      target.name === \"poddy_trained\" ? target.checked : target.value;\n    const name = target.name;\n\n    setForm({\n      ...form,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const errs = formValidate();\n    if (Object.keys(errs).length === 0) {\n      forNewMovie ? postData(form) : putData(form);\n    } else {\n      setErrors({ errs });\n    }\n  };\n\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n  const formValidate = () => {\n    let err = {};\n    if (!form.title) err.title = \"Title is required\";\n    if (!form.poster) err.poster = \"Poster is required\";\n    return err;\n  };\n\n  return (\n    <>\n      <form id={formId} onSubmit={handleSubmit}>\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={form.title}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"age\">Year</label>\n        <input\n          type=\"number\"\n          name=\"year\"\n          value={form.year}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"poster\">Poster</label>\n        <input\n          type=\"url\"\n          name=\"poster\"\n          value={form.poster}\n          onChange={handleChange}\n          required\n        />\n\n        <button type=\"submit\" className=\"btn\">\n          Submit\n        </button>\n      </form>\n      <p>{message}</p>\n      <div>\n        {Object.keys(errors).map((err, index) => (\n          <li key={index}>{err}</li>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}