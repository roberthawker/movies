{"ast":null,"code":"import mongoose from \"mongoose\";\n\nconst bcrypt = require('bcrypt');\n\nconst saltRounds = 10;\nconst UserSchema = mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\nUserSchema.pre('save', function (next) {\n  // Check if document is new or a new password has been set\n  if (this.isNew || this.isModified('password')) {\n    // Saving reference to this because of changing scopes\n    const document = this;\n    bcrypt.hash(document.password, saltRounds, function (err, hashedPassword) {\n      if (err) {\n        next(err);\n      } else {\n        document.password = hashedPassword;\n        next();\n      }\n    });\n  } else {\n    next();\n  }\n});\nexport default mongoose.models.User || mongoose.model(\"User\", UserSchema); // const UserSchema = mongoose.Schema({\n//   username: {\n//     type: String,\n//     required: true,\n//     unique: true\n//   },\n//   email: {\n//     type: String,\n//     required: true,\n//     unique: true\n//   },\n//   password: {\n//     type: String,\n//     required: true\n//   },\n//   createdAt: {\n//     type: Date,\n//     default: Date.now()\n//   }\n// });","map":{"version":3,"sources":["/Users/roberthawker/Desktop/MovieMongoose 2/models/User.js"],"names":["mongoose","bcrypt","require","saltRounds","UserSchema","Schema","email","type","String","required","unique","password","pre","next","isNew","isModified","document","hash","err","hashedPassword","models","User","model"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,UAAU,GAAG,EAAnB;AAEA,MAAMC,UAAU,GAAGJ,QAAQ,CAACK,MAAT,CAAgB;AAC/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADwB;AAM/BC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF;AANqB,CAAhB,CAAnB;AAYEL,UAAU,CAACQ,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC;AACA,MAAI,KAAKC,KAAL,IAAc,KAAKC,UAAL,CAAgB,UAAhB,CAAlB,EAA+C;AAC7C;AACA,UAAMC,QAAQ,GAAG,IAAjB;AACAf,IAAAA,MAAM,CAACgB,IAAP,CAAYD,QAAQ,CAACL,QAArB,EAA+BR,UAA/B,EACE,UAASe,GAAT,EAAcC,cAAd,EAA8B;AAC9B,UAAID,GAAJ,EAAS;AACPL,QAAAA,IAAI,CAACK,GAAD,CAAJ;AACD,OAFD,MAGK;AACHF,QAAAA,QAAQ,CAACL,QAAT,GAAoBQ,cAApB;AACAN,QAAAA,IAAI;AACL;AACF,KATD;AAUD,GAbD,MAaO;AACLA,IAAAA,IAAI;AACL;AACF,CAlBD;AAuBF,eAAeb,QAAQ,CAACoB,MAAT,CAAgBC,IAAhB,IAAwBrB,QAAQ,CAACsB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAvC,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import mongoose from \"mongoose\";\nconst bcrypt = require('bcrypt');\n\nconst saltRounds = 10;\n\nconst UserSchema = mongoose.Schema({\n    email: {\n      type: String,\n      required: true,\n      unique: true\n    },\n    password: {\n      type: String,\n      required: true\n    },\n  });\n\n  UserSchema.pre('save', function(next) {\n    // Check if document is new or a new password has been set\n    if (this.isNew || this.isModified('password')) {\n      // Saving reference to this because of changing scopes\n      const document = this;\n      bcrypt.hash(document.password, saltRounds,\n        function(err, hashedPassword) {\n        if (err) {\n          next(err);\n        }\n        else {\n          document.password = hashedPassword;\n          next();\n        }\n      });\n    } else {\n      next();\n    }\n  });\n\n\n\n\nexport default mongoose.models.User || mongoose.model(\"User\", UserSchema)\n\n\n\n\n// const UserSchema = mongoose.Schema({\n//   username: {\n//     type: String,\n//     required: true,\n//     unique: true\n//   },\n//   email: {\n//     type: String,\n//     required: true,\n//     unique: true\n//   },\n//   password: {\n//     type: String,\n//     required: true\n//   },\n//   createdAt: {\n//     type: Date,\n//     default: Date.now()\n//   }\n// });"]},"metadata":{},"sourceType":"module"}