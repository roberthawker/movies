{"ast":null,"code":"var _jsxFileName = \"/Users/roberthawker/Desktop/moods/components/Form.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { mutate } from 'swr';\n\nconst Form = ({\n  formId,\n  movieForm,\n  forNewMovie = true\n}) => {\n  const router = useRouter();\n  const contentType = 'application/json';\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    title: movieForm.title,\n    poster: movieForm.poster,\n    year: movieForm.year\n  });\n  /* The PUT method edits an existing entry in the mongodb database. */\n\n  const putData = async form => {\n    const {\n      id\n    } = router.query;\n\n    try {\n      const res = await fetch(`/api/movies/${id}`, {\n        method: 'PUT',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType\n        },\n        body: JSON.stringify(form)\n      }); // Throw error with status code in case Fetch API req failed\n\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      const {\n        data\n      } = await res.json();\n      mutate(`/api/movies/${id}`, data, false); // Update the local data without a revalidation\n\n      router.push('/');\n    } catch (error) {\n      setMessage('Failed to update movie');\n    }\n  };\n  /* The POST method adds a new entry in the mongodb database. */\n\n\n  const postData = async form => {\n    try {\n      const res = await fetch('/api/movies', {\n        method: 'POST',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType\n        },\n        body: JSON.stringify(form)\n      }); // Throw error with status code in case Fetch API req failed\n\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      router.push('/');\n    } catch (error) {\n      setMessage('Failed to add movie');\n    }\n  };\n\n  const handleChange = e => {\n    const target = e.target;\n    const name = target.name;\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const errs = formValidate();\n\n    if (Object.keys(errs).length === 0) {\n      forNewMovie ? postData(form) : putData(form);\n    } else {\n      setErrors({\n        errs\n      });\n    }\n  };\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n\n\n  const formValidate = () => {\n    let err = {};\n    if (!form.title) err.title = 'Title is required';\n    if (!form.poster) err.poster = 'Poster is required';\n    return err;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    id: formId,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Title\"), __jsx(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    value: form.title,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Year\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"year\",\n    value: form.year,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"poster\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Poster\"), __jsx(\"input\", {\n    type: \"url\",\n    name: \"poster\",\n    value: form.poster,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Submit\")), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, message), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, Object.keys(errors).map((err, index) => __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, err))));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/roberthawker/Desktop/moods/components/Form.js"],"names":["useState","useRouter","mutate","Form","formId","movieForm","forNewMovie","router","contentType","errors","setErrors","message","setMessage","form","setForm","title","poster","year","putData","id","query","res","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","status","data","json","push","error","postData","handleChange","e","target","name","value","handleSubmit","preventDefault","errs","formValidate","Object","keys","length","err","map","index"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { mutate } from 'swr'\n\nconst Form = ({ formId, movieForm, forNewMovie = true }) => {\n  const router = useRouter()\n  const contentType = 'application/json'\n  const [errors, setErrors] = useState({})\n  const [message, setMessage] = useState('')\n\n  const [form, setForm] = useState({\n    title: movieForm.title,\n    poster: movieForm.poster,\n    year: movieForm.year,\n  })\n\n  /* The PUT method edits an existing entry in the mongodb database. */\n  const putData = async (form) => {\n    const { id } = router.query\n\n    try {\n      const res = await fetch(`/api/movies/${id}`, {\n        method: 'PUT',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      const { data } = await res.json()\n\n      mutate(`/api/movies/${id}`, data, false) // Update the local data without a revalidation\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to update movie')\n    }\n  }\n\n  /* The POST method adds a new entry in the mongodb database. */\n  const postData = async (form) => {\n    try {\n      const res = await fetch('/api/movies', {\n        method: 'POST',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to add movie')\n    }\n  }\n\n  const handleChange = (e) => {\n    const target = e.target\n    const name = target.name\n\n    setForm({\n      ...form,\n      [name]: value,\n    })\n  }\n \n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const errs = formValidate()\n    if (Object.keys(errs).length === 0) {\n      forNewMovie ? postData(form) : putData(form)\n    } else {\n      setErrors({ errs })\n    }\n  }\n\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n  const formValidate = () => {\n    let err = {}\n    if (!form.title) err.title = 'Title is required'\n    if (!form.poster) err.poster = 'Poster is required'\n    return err\n  }\n\n  return (\n    <>\n      <form id={formId} onSubmit={handleSubmit}>\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={form.title}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"age\">Year</label>\n        <input\n          type=\"number\"\n          name=\"year\"\n          value={form.year}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"poster\">Poster</label>\n        <input\n          type=\"url\"\n          name=\"poster\"\n          value={form.poster}\n          onChange={handleChange}\n          required\n        />\n\n\n    \n\n        <button type=\"submit\" className=\"btn\">\n          Submit\n        </button>\n      </form>\n      <p>{message}</p>\n      <div>\n        {Object.keys(errors).map((err, index) => (\n          <li key={index}>{err}</li>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}