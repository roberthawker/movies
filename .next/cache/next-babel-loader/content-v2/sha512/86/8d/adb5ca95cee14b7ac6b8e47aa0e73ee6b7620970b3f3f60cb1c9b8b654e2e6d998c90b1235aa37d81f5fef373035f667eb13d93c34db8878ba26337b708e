{"ast":null,"code":"var _jsxFileName = \"/Users/roberthawker/Desktop/moods/components/Form.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { mutate } from 'swr';\n\nconst Form = ({\n  formId,\n  petForm,\n  forNewPet = true\n}) => {\n  const router = useRouter();\n  const contentType = 'application/json';\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const {\n    0: form,\n    1: setForm\n  } = useState({\n    name: petForm.name,\n    owner_name: petForm.owner_name,\n    species: petForm.species,\n    age: petForm.age,\n    poddy_trained: petForm.poddy_trained,\n    diet: petForm.diet,\n    image_url: petForm.image_url,\n    likes: petForm.likes,\n    dislikes: petForm.dislikes\n  });\n  /* The PUT method edits an existing entry in the mongodb database. */\n\n  const putData = async form => {\n    const {\n      id\n    } = router.query;\n\n    try {\n      const res = await fetch(`/api/pets/${id}`, {\n        method: 'PUT',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType\n        },\n        body: JSON.stringify(form)\n      }); // Throw error with status code in case Fetch API req failed\n\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      const {\n        data\n      } = await res.json();\n      mutate(`/api/pets/${id}`, data, false); // Update the local data without a revalidation\n\n      router.push('/');\n    } catch (error) {\n      setMessage('Failed to update pet');\n    }\n  };\n  /* The POST method adds a new entry in the mongodb database. */\n\n\n  const postData = async form => {\n    try {\n      const res = await fetch('/api/pets', {\n        method: 'POST',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType\n        },\n        body: JSON.stringify(form)\n      }); // Throw error with status code in case Fetch API req failed\n\n      if (!res.ok) {\n        throw new Error(res.status);\n      }\n\n      router.push('/');\n    } catch (error) {\n      setMessage('Failed to add pet');\n    }\n  };\n\n  const handleChange = e => {\n    const target = e.target;\n    const value = target.name === 'poddy_trained' ? target.checked : target.value;\n    const name = target.name;\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const errs = formValidate();\n\n    if (Object.keys(errs).length === 0) {\n      forNewPet ? postData(form) : putData(form);\n    } else {\n      setErrors({\n        errs\n      });\n    }\n  };\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n\n\n  const formValidate = () => {\n    let err = {};\n    if (!form.name) err.name = 'Name is required';\n    if (!form.owner_name) err.owner_name = 'Owner is required';\n    if (!form.species) err.species = 'Species is required';\n    if (!form.image_url) err.image_url = 'Image URL is required';\n    return err;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    id: formId,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Name\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"20\",\n    name: \"name\",\n    value: form.name,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"owner_name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Owner\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"20\",\n    name: \"owner_name\",\n    value: form.owner_name,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"species\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Species\"), __jsx(\"input\", {\n    type: \"text\",\n    maxLength: \"30\",\n    name: \"species\",\n    value: form.species,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Age\"), __jsx(\"input\", {\n    type: \"number\",\n    name: \"age\",\n    value: form.age,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"poddy_trained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Potty Trained\"), __jsx(\"input\", {\n    type: \"checkbox\",\n    name: \"poddy_trained\",\n    checked: form.poddy_trained,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"diet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \"Diet\"), __jsx(\"textarea\", {\n    name: \"diet\",\n    maxLength: \"60\",\n    value: form.diet,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"image_url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"Image URL\"), __jsx(\"input\", {\n    type: \"url\",\n    name: \"image_url\",\n    value: form.image_url,\n    onChange: handleChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"likes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Likes\"), __jsx(\"textarea\", {\n    name: \"likes\",\n    maxLength: \"60\",\n    value: form.likes,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"dislikes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"Dislikes\"), __jsx(\"textarea\", {\n    name: \"dislikes\",\n    maxLength: \"60\",\n    value: form.dislikes,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Submit\")), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, message), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, Object.keys(errors).map((err, index) => __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, err))));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/roberthawker/Desktop/moods/components/Form.js"],"names":["useState","useRouter","mutate","Form","formId","petForm","forNewPet","router","contentType","errors","setErrors","message","setMessage","form","setForm","name","owner_name","species","age","poddy_trained","diet","image_url","likes","dislikes","putData","id","query","res","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","status","data","json","push","error","postData","handleChange","e","target","value","checked","handleSubmit","preventDefault","errs","formValidate","Object","keys","length","err","map","index"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { mutate } from 'swr'\n\nconst Form = ({ formId, petForm, forNewPet = true }) => {\n  const router = useRouter()\n  const contentType = 'application/json'\n  const [errors, setErrors] = useState({})\n  const [message, setMessage] = useState('')\n\n  const [form, setForm] = useState({\n    name: petForm.name,\n    owner_name: petForm.owner_name,\n    species: petForm.species,\n    age: petForm.age,\n    poddy_trained: petForm.poddy_trained,\n    diet: petForm.diet,\n    image_url: petForm.image_url,\n    likes: petForm.likes,\n    dislikes: petForm.dislikes,\n  })\n\n  /* The PUT method edits an existing entry in the mongodb database. */\n  const putData = async (form) => {\n    const { id } = router.query\n\n    try {\n      const res = await fetch(`/api/pets/${id}`, {\n        method: 'PUT',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      const { data } = await res.json()\n\n      mutate(`/api/pets/${id}`, data, false) // Update the local data without a revalidation\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to update pet')\n    }\n  }\n\n  /* The POST method adds a new entry in the mongodb database. */\n  const postData = async (form) => {\n    try {\n      const res = await fetch('/api/pets', {\n        method: 'POST',\n        headers: {\n          Accept: contentType,\n          'Content-Type': contentType,\n        },\n        body: JSON.stringify(form),\n      })\n\n      // Throw error with status code in case Fetch API req failed\n      if (!res.ok) {\n        throw new Error(res.status)\n      }\n\n      router.push('/')\n    } catch (error) {\n      setMessage('Failed to add pet')\n    }\n  }\n\n  const handleChange = (e) => {\n    const target = e.target\n    const value =\n      target.name === 'poddy_trained' ? target.checked : target.value\n    const name = target.name\n\n    setForm({\n      ...form,\n      [name]: value,\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const errs = formValidate()\n    if (Object.keys(errs).length === 0) {\n      forNewPet ? postData(form) : putData(form)\n    } else {\n      setErrors({ errs })\n    }\n  }\n\n  /* Makes sure pet info is filled for pet name, owner name, species, and image url*/\n  const formValidate = () => {\n    let err = {}\n    if (!form.name) err.name = 'Name is required'\n    if (!form.owner_name) err.owner_name = 'Owner is required'\n    if (!form.species) err.species = 'Species is required'\n    if (!form.image_url) err.image_url = 'Image URL is required'\n    return err\n  }\n\n  return (\n    <>\n      <form id={formId} onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          maxLength=\"20\"\n          name=\"name\"\n          value={form.name}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"owner_name\">Owner</label>\n        <input\n          type=\"text\"\n          maxLength=\"20\"\n          name=\"owner_name\"\n          value={form.owner_name}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"species\">Species</label>\n        <input\n          type=\"text\"\n          maxLength=\"30\"\n          name=\"species\"\n          value={form.species}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"age\">Age</label>\n        <input\n          type=\"number\"\n          name=\"age\"\n          value={form.age}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"poddy_trained\">Potty Trained</label>\n        <input\n          type=\"checkbox\"\n          name=\"poddy_trained\"\n          checked={form.poddy_trained}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"diet\">Diet</label>\n        <textarea\n          name=\"diet\"\n          maxLength=\"60\"\n          value={form.diet}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"image_url\">Image URL</label>\n        <input\n          type=\"url\"\n          name=\"image_url\"\n          value={form.image_url}\n          onChange={handleChange}\n          required\n        />\n\n        <label htmlFor=\"likes\">Likes</label>\n        <textarea\n          name=\"likes\"\n          maxLength=\"60\"\n          value={form.likes}\n          onChange={handleChange}\n        />\n\n        <label htmlFor=\"dislikes\">Dislikes</label>\n        <textarea\n          name=\"dislikes\"\n          maxLength=\"60\"\n          value={form.dislikes}\n          onChange={handleChange}\n        />\n\n        <button type=\"submit\" className=\"btn\">\n          Submit\n        </button>\n      </form>\n      <p>{message}</p>\n      <div>\n        {Object.keys(errors).map((err, index) => (\n          <li key={index}>{err}</li>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}